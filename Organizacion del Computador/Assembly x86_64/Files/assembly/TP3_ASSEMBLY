%include "io.inc"

section .text
global CMAIN
.global nodo_crear
.global nodo_destruir
.global cola_crear
.global cola_destruir
.global cola_encolar
.global cola_desencolar
.global cola_esta_vacia
.global cola_ver_primero
define SIZEOF_COLA 16
define OFFSET_HEAD 0
define OFFSET_TAIL 8

define SIZEOF_NODO 16
define OFFSET_DATA 0
define OFFSET_NEXT 8

nodo_crear:
  push rbx
  mov rbx, 16 #SIZEOF_NODO
  call malloc
  mov rbx, rdi
  mov (rbx


nodo_destruir:
  push rbp
  mov rbp, rsp
  sub rsp, 16
  mov (rbp-8), rdi
  mov rax, (rbp-8)
  mov rdi, rax
  call free
  leave
  ret


cola_crear:
  push %rbx                          /* Se recomienda usar calloc() */
  mov %rdi, 16 #SIZEOF_COLA
  call calloc
  mov (%rbx-8), %rax
  cmp (%rbx-8), $0
  jne .L2
  mov %rax, $0
  jmp .L3
.L2:
    mov %rax, (%rbx-8)
    mov (%rax), 0
    mov %rax, (%rbx-8)
    mov (%rax+8), 0
.L3:
  pop %rbx
  leave
  ret 


cola_esta_vacia:           /* Se debe usar un conditional move (cmovXX/setXX) */
  cmp %rdi, $0
  mov %rdi, %rax
  cmove $0, %rdi
  cmove $0,(%rdi+8)
  ret


cola_ver_primero:          /* Se debe usar un salto condicional */
  push %rbx
  mov %rbx, %rdi
  call cola_esta_vacia
  cmp %rax, $0
  movq $0, %rax
  je  .L4
  mov 0(%rbx), %r13 #OFFSET_HEAD
  mov 0(%r13), %rax
.L4:
    pop %rbx
  ret


cola_encolar:              /* Se debe usar un conditional move */
  ret


cola_desencolar:           /* Se recomienda usar dos saltos condicionales + un cmov */
  call cola_ver_primero
  ret


cola_destruir:             /* Sin restricciones */
  ret
  
CMAIN:
    ;write your code here
    xor eax, eax
    ret